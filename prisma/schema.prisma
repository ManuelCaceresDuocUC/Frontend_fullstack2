generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/**
 * ================= Base =================
 */

model Perfume {
  id        String           @id @default(cuid())
  name      String
  brand     String
  ml        Int
  price     Int
  images    Json
  createdBy String?
  createdAt DateTime         @default(now())
  category  Perfume_category @default(OTROS)
  stock     Stock?
  OrderItem OrderItem[]
}

model Stock {
  id        String @id @default(cuid())
  perfumeId String @unique
  qty       Int    @default(0)

  perfume Perfume @relation(fields: [perfumeId], references: [id])
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  image     String?
  role      User_role @default(USER)
  createdAt DateTime  @default(now())
}

enum User_role {
  USER
  ADMIN
}

enum Perfume_category {
  NICHO
  ARABES
  DISENADOR // usa "DISENADOR"; en UI mapea a “DISEÑADOR”
  OTROS
}

/**
 * ================= Checkout =================
 */

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  INITIATED
  AUTHORIZED
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  WEBPAY
  SERVIPAG
  MANUAL
}
enum ShipmentStatus { PENDING PREPARING SHIPPED DELIVERED CANCELLED }

model Order {
  id        String  @id @default(cuid())
  userId    String?
  email     String
  buyerName String
  phone     String?

  // Dirección “plana”
  shippingStreet String @default("")
  shippingCity   String @default("")
  shippingRegion String @default("")
  shippingZip    String @default("")
  shippingNotes  String @default("")

  items       OrderItem[]
  subtotal    Int
  shippingFee Int
  total       Int
  status      OrderStatus @default(PENDING)
  payment     Payment?
  shipment    Shipment?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([status])
  @@index([createdAt])
  @@map("orders") // evita palabra reservada ORDER
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  perfumeId String
  perfume   Perfume @relation(fields: [perfumeId], references: [id])

  name      String
  brand     String
  ml        Int
  unitPrice Int // precio unitario CLP
  qty       Int

  @@map("order_items")
}

model Payment {
  id           String        @id @default(cuid())
  orderId      String        @unique
  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  method       PaymentMethod
  status       PaymentStatus @default(INITIATED)
  providerTxId String?
  amount       Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("payments")
}

model Shipment {
  id           String         @id @default(cuid())
  order        Order          @relation(fields: [orderId], references: [id])
  orderId      String         @unique
  trackingCode String?
  carrier      String?
  eta          DateTime?
  cost         Int?
  status       ShipmentStatus @default(PENDING) // ✅
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}
// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Genero {
  HOMBRE
  MUJER
  UNISEX
}

enum PerfumeCategory {
  NICHO
  ARABES
  DISENADOR
  OTROS
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  INITIATED
  AUTHORIZED
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  WEBPAY
  SERVIPAG
  MANUAL
}

enum DteEstado {
  ENVIADO
  ACEPTADO
  RECHAZADO
  REPARO
}

model Dte {
  id      String @id @default(cuid())
  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  tipo      Int
  folio     Int
  ted       String
  xml       Bytes
  trackId   String?
  estadoSii DteEstado @default(ENVIADO)
  pdfUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tipo, folio])
  @@index([trackId])
  @@index([estadoSii, createdAt])
}

model Perfume {
  id          String          @id @default(cuid())
  name        String
  brand       String
  ml          Int // frasco base (referencia)
  price       Int // precio frasco base (referencia)
  images      Json?
  createdBy   String?
  createdAt   DateTime        @default(now())
  description String?         @db.Text
  genero      Genero          @default(UNISEX)
  isDecant    Boolean         @default(false)
  tipo        PerfumeCategory
  updatedAt   DateTime        @updatedAt

  variants  PerfumeVariant[] // stock/precio reales por ml
  OrderItem OrderItem[]

  @@index([genero, tipo, isDecant])
}

model PerfumeVariant {
  id        String  @id @default(cuid())
  perfumeId String
  perfume   Perfume @relation(fields: [perfumeId], references: [id], onDelete: Cascade)

  ml     Int // 3 | 5 | 10 | etc.
  price  Int // CLP
  stock  Int     @default(0) // unidades
  sku    String? @unique
  active Boolean @default(true)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]

  @@unique([perfumeId, ml])
  @@index([active, ml])
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  image          String?
  role           UserRole @default(USER)
  createdAt      DateTime @default(now())
  passwordHash   String   @default("")
  phone          String?  @default("")
  shippingCity   String   @default("")
  shippingNotes  String   @default("")
  shippingRegion String   @default("")
  shippingStreet String   @default("")
  shippingZip    String   @default("")
}

model Order {
  id             String      @id @default(cuid())
  userId         String?
  email          String
  buyerName      String
  phone          String?
  shippingStreet String      @default("")
  shippingCity   String      @default("")
  shippingRegion String      @default("")
  shippingZip    String      @default("")
  shippingNotes  String      @default("")
  subtotal       Int
  shippingFee    Int
  total          Int
  status         OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  items    OrderItem[]
  payment  Payment?
  shipment Shipment?
  dte      Dte?

  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  perfumeId String
  variantId String? // nullable para Ã³rdenes antiguas
  name      String
  brand     String
  ml        Int
  unitPrice Int
  qty       Int

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  perfume Perfume         @relation(fields: [perfumeId], references: [id], onDelete: Cascade)
  variant PerfumeVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@index([orderId], map: "order_items_orderId_fkey")
  @@index([perfumeId], map: "order_items_perfumeId_fkey")
  @@index([variantId])
  @@map("order_items")
}

model Payment {
  id           String        @id @default(cuid())
  orderId      String        @unique
  method       PaymentMethod
  status       PaymentStatus @default(INITIATED)
  providerTxId String?
  amount       Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Shipment {
  id        String   @id @default(cuid())
  orderId   String   @unique
  carrier   String?
  tracking  String?
  delivered Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipments")
}

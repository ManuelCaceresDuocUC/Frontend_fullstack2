generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Dte {
  id        String   @id @default(cuid())
  orderId   String   @unique
  tipo      Int
  folio     Int
  ted       String
  xml       Bytes
  trackId   String?
  estadoSii String // ENVIADO|ACEPTADO|RECHAZADO|REPARO
  pdfUrl    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Perfume {
  id          String           @id @default(cuid())
  name        String
  brand       String
  ml          Int
  price       Int
  images      Json?
  createdBy   String?
  createdAt   DateTime         @default(now())
  description String?          @db.Text
  genero      Genero           @default(UNISEX)
  isDecant    Boolean          @default(false)
  tipo        Perfume_category
  updatedAt   DateTime         @updatedAt
  Stock       Stock?
  OrderItem   OrderItem[]

  @@index([genero, tipo, isDecant])
}

model Stock {
  id        String  @id @default(cuid())
  perfumeId String  @unique
  qty       Int     @default(0)
  perfume   Perfume @relation(fields: [perfumeId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  image          String?
  role           User_role @default(USER)
  createdAt      DateTime  @default(now())
  passwordHash   String    @default("")
  phone          String?   @default("")
  shippingCity   String    @default("")
  shippingNotes  String    @default("")
  shippingRegion String    @default("")
  shippingStreet String    @default("")
  shippingZip    String    @default("")
}

model Order {
  id             String      @id @default(cuid())
  userId         String?
  email          String
  buyerName      String
  phone          String?
  shippingStreet String      @default("")
  shippingCity   String      @default("")
  shippingRegion String      @default("")
  shippingZip    String      @default("")
  shippingNotes  String      @default("")
  subtotal       Int
  shippingFee    Int
  total          Int
  status         OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  items          OrderItem[]
  payment        Payment?
  shipment       Shipment?

  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  perfumeId String
  name      String
  brand     String
  ml        Int
  unitPrice Int
  qty       Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  perfume   Perfume @relation(fields: [perfumeId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "order_items_orderId_fkey")
  @@index([perfumeId], map: "order_items_perfumeId_fkey")
  @@map("order_items")
}

model Payment {
  id           String        @id @default(cuid())
  orderId      String        @unique
  method       PaymentMethod
  status       PaymentStatus @default(INITIATED)
  providerTxId String?
  amount       Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Shipment {
  id        String   @id @default(cuid())
  orderId   String   @unique
  carrier   String?
  tracking  String?
  delivered Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipments")
}

enum Genero {
  HOMBRE
  MUJER
  UNISEX
}

enum Perfume_category {
  NICHO
  ARABES
  DISENADOR
  OTROS
}

enum User_role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  INITIATED
  AUTHORIZED
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  WEBPAY
  SERVIPAG
  MANUAL
}
